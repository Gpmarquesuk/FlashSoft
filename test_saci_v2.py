#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
TESTE SACI v2.0.1 - Valida√ß√£o P√≥s-Corre√ß√µes
============================================

Executa 3 debates para validar:
1. SACI 1.0 vs SACI 2.0 - Compara√ß√£o
2. Como reduzir lat√™ncia na SACI 2.0
3. Como implementar melhor UI na SACI 2.0

Objetivo: Verificar se corre√ß√µes consensuais funcionaram.
"""

import os
import sys
import json
from datetime import datetime

# Configurar environment
if sys.platform == "win32":
    import codecs
    sys.stdout = codecs.getwriter("utf-8")(sys.stdout.buffer, "strict")
    sys.stderr = codecs.getwriter("utf-8")(sys.stderr.buffer, "strict")

# Importar SACI 2.0
from saci import run_saci_debate

print("\n" + "="*80)
print("üß™ TESTE SACI v2.0.1 - P√ìS-CORRE√á√ïES CONSENSUAIS")
print("="*80)
print(f"\nData: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
print("Objetivo: Validar corre√ß√µes de logging, retry e embeddings\n")

# Modelos SACI (FIXOS)
SACI_MODELS = [
    "anthropic/claude-sonnet-4.5",
    "openai/gpt-5-codex",
    "google/gemini-2.5-pro",
    "x-ai/grok-4"
]

# ============================================================================
# DEBATE 1: SACI 1.0 vs SACI 2.0
# ============================================================================

print("\n" + "="*80)
print("üìä DEBATE 1: SACI 1.0 vs SACI 2.0")
print("="*80 + "\n")

debate1_problema = """
SACI 1.0 vs SACI 2.0: Qual vers√£o usar em produ√ß√£o?

Contexto:
- SACI 1.0: Simples, testada, sem m√©tricas quantitativas
- SACI 2.0: M√©tricas sem√¢nticas, early stopping, mais complexa

Quest√£o: Baseado nas caracter√≠sticas de cada vers√£o, qual recomenda√ß√£o 
voc√™s fazem para uso em produ√ß√£o AGORA (outubro 2025)?

Op√ß√µes:
A) Usar SACI 1.0 (est√°vel, simples)
B) Usar SACI 2.0 (features avan√ßadas)
C) Usar 1.0 para casos simples, 2.0 para casos complexos
D) Esperar mais testes antes de decidir

Vote e justifique sua escolha.
"""

debate1_contexto = """
SACI 1.0:
- ‚úÖ Est√°vel e testada
- ‚úÖ Votos por keywords (funciona)
- ‚úÖ Simples (300 linhas)
- ‚ùå Sem m√©tricas sem√¢nticas
- ‚ùå Sem early stopping inteligente
- ‚ùå Todas rodadas executadas sempre

SACI 2.0.1 (P√≥s-corre√ß√µes):
- ‚úÖ M√©tricas sem√¢nticas (embeddings)
- ‚úÖ Early stopping (economiza custo)
- ‚úÖ Logging adequado
- ‚úÖ Rastreabilidade JSON
- ‚ùå Mais complexa (~500 linhas)
- ‚ùå Precisa valida√ß√£o em produ√ß√£o
- ‚ö†Ô∏è Embeddings podem estar com problemas
"""

try:
    print("‚è≥ Iniciando debate 1...")
    resultado1 = run_saci_debate(
        problema=debate1_problema,
        contexto=debate1_contexto,
        models=SACI_MODELS,
        max_rounds=3,
        convergence_threshold=0.70,
        output_file="logs/saci_test_v1_vs_v2.json"
    )
    
    print("\n‚úÖ DEBATE 1 CONCLU√çDO")
    print(f"Consenso: {resultado1.get('converged', False)}")
    print(f"Score final: {resultado1.get('final_score', 0):.3f}")
    print(f"Rodadas: {len(resultado1.get('rounds', []))}")
    
except Exception as e:
    print(f"\n‚ùå ERRO NO DEBATE 1: {e}")
    import traceback
    traceback.print_exc()

# ============================================================================
# DEBATE 2: Como reduzir lat√™ncia SACI 2.0
# ============================================================================

print("\n" + "="*80)
print("‚ö° DEBATE 2: Como reduzir lat√™ncia na SACI 2.0")
print("="*80 + "\n")

debate2_problema = """
Como reduzir lat√™ncia na SACI 2.0 sem perder qualidade?

Contexto:
- SACI 2.0 √© mais lenta que 1.0 (embeddings + m√©tricas)
- Cada rodada: 4 LLM calls + 4 embeddings
- Lat√™ncia t√≠pica: 30-60s por rodada
- Usu√°rios querem respostas < 2 minutos total

Quest√£o: Qual estrat√©gia priorizar para reduzir lat√™ncia?

Op√ß√µes:
A) Cache agressivo de embeddings
B) Paralelizar chamadas LLM + embeddings
C) Reduzir max_rounds (3 ‚Üí 2)
D) Early stopping mais agressivo (threshold 0.65)
E) Usar modelos mais r√°pidos (sem perder qualidade)

Vote na melhor estrat√©gia e justifique.
"""

debate2_contexto = """
Trade-offs conhecidos:
- Cache: Reduz embeddings, mas pode comprometer novidade
- Paraleliza√ß√£o: Reduz lat√™ncia total, aumenta custo instant√¢neo
- Menos rounds: Pode n√£o convergir
- Threshold menor: Pode aceitar consenso fraco
- Modelos r√°pidos: Podem perder qualidade

Meta: < 2 minutos total, manter qualidade de consenso
"""

try:
    print("‚è≥ Iniciando debate 2...")
    resultado2 = run_saci_debate(
        problema=debate2_problema,
        contexto=debate2_contexto,
        models=SACI_MODELS,
        max_rounds=3,
        convergence_threshold=0.70,
        output_file="logs/saci_test_latency.json"
    )
    
    print("\n‚úÖ DEBATE 2 CONCLU√çDO")
    print(f"Consenso: {resultado2.get('converged', False)}")
    print(f"Score final: {resultado2.get('final_score', 0):.3f}")
    print(f"Rodadas: {len(resultado2.get('rounds', []))}")
    
except Exception as e:
    print(f"\n‚ùå ERRO NO DEBATE 2: {e}")
    import traceback
    traceback.print_exc()

# ============================================================================
# DEBATE 3: Melhor UI para SACI 2.0
# ============================================================================

print("\n" + "="*80)
print("üé® DEBATE 3: Melhor UI para SACI 2.0")
print("="*80 + "\n")

debate3_problema = """
Qual a melhor interface de usu√°rio para SACI 2.0?

Contexto:
- SACI 2.0 gera muito contexto: votos, scores, similaridade, logs
- Usu√°rios precisam entender converg√™ncia e tomar decis√µes
- Deve funcionar em terminal E web

Quest√£o: Qual abordagem de UI priorizar?

Op√ß√µes:
A) CLI rica (rich/typer) com progress bars e tabelas
B) Web UI (Streamlit/Gradio) com gr√°ficos interativos
C) Dashboard (React/Vue) profissional
D) JSON API + m√∫ltiplas UIs (desacoplamento)
E) Terminal simples + logs JSON (atual)

Vote considerando:
- Facilidade de implementa√ß√£o
- Experi√™ncia do usu√°rio
- Manutenibilidade
- Tempo de desenvolvimento
"""

debate3_contexto = """
Requisitos:
- Mostrar progresso do debate em tempo real
- Visualizar scores de converg√™ncia
- Exibir votos de cada modelo
- Permitir interven√ß√£o humana (opcional)
- Exportar resultados

Restri√ß√µes:
- Equipe pequena (1-2 devs)
- Tempo limitado (1-2 semanas)
- Deve ser f√°cil de manter

P√∫blico:
- Desenvolvedores t√©cnicos
- Product managers
- Stakeholders n√£o-t√©cnicos (eventualmente)
"""

try:
    print("‚è≥ Iniciando debate 3...")
    resultado3 = run_saci_debate(
        problema=debate3_problema,
        contexto=debate3_contexto,
        models=SACI_MODELS,
        max_rounds=3,
        convergence_threshold=0.70,
        output_file="logs/saci_test_ui.json"
    )
    
    print("\n‚úÖ DEBATE 3 CONCLU√çDO")
    print(f"Consenso: {resultado3.get('converged', False)}")
    print(f"Score final: {resultado3.get('final_score', 0):.3f}")
    print(f"Rodadas: {len(resultado3.get('rounds', []))}")
    
except Exception as e:
    print(f"\n‚ùå ERRO NO DEBATE 3: {e}")
    import traceback
    traceback.print_exc()

# ============================================================================
# RESUMO FINAL
# ============================================================================

print("\n" + "="*80)
print("üìä RESUMO DOS TESTES SACI v2.0.1")
print("="*80 + "\n")

print("RESULTADOS:")
print("-" * 80)

try:
    print(f"\n1Ô∏è‚É£  SACI 1.0 vs 2.0:")
    print(f"   Consenso: {'‚úÖ SIM' if resultado1.get('converged') else '‚ùå N√ÉO'}")
    print(f"   Score: {resultado1.get('final_score', 0):.3f}")
    print(f"   Rodadas: {len(resultado1.get('rounds', []))}")
    if resultado1.get('converged'):
        print(f"   Decis√£o: [Ver logs/saci_test_v1_vs_v2.json]")
except:
    print("\n1Ô∏è‚É£  SACI 1.0 vs 2.0: ‚ùå FALHOU")

try:
    print(f"\n2Ô∏è‚É£  Redu√ß√£o de lat√™ncia:")
    print(f"   Consenso: {'‚úÖ SIM' if resultado2.get('converged') else '‚ùå N√ÉO'}")
    print(f"   Score: {resultado2.get('final_score', 0):.3f}")
    print(f"   Rodadas: {len(resultado2.get('rounds', []))}")
    if resultado2.get('converged'):
        print(f"   Estrat√©gia: [Ver logs/saci_test_latency.json]")
except:
    print("\n2Ô∏è‚É£  Redu√ß√£o de lat√™ncia: ‚ùå FALHOU")

try:
    print(f"\n3Ô∏è‚É£  Melhor UI:")
    print(f"   Consenso: {'‚úÖ SIM' if resultado3.get('converged') else '‚ùå N√ÉO'}")
    print(f"   Score: {resultado3.get('final_score', 0):.3f}")
    print(f"   Rodadas: {len(resultado3.get('rounds', []))}")
    if resultado3.get('converged'):
        print(f"   UI escolhida: [Ver logs/saci_test_ui.json]")
except:
    print("\n3Ô∏è‚É£  Melhor UI: ‚ùå FALHOU")

print("\n" + "="*80)
print("üìÅ LOGS SALVOS EM:")
print("   - logs/saci_test_v1_vs_v2.json")
print("   - logs/saci_test_latency.json")
print("   - logs/saci_test_ui.json")
print("="*80 + "\n")

print("üî¨ VALIDA√á√ÉO DAS CORRE√á√ïES:")
print("-" * 80)
print("Verifique nos logs se:")
print("  1. Similaridade sem√¢ntica > 0.0 (n√£o zerada)")
print("  2. Logging aparece corretamente")
print("  3. Early stopping funciona (se score > 0.70)")
print("  4. Votos s√£o extra√≠dos corretamente")
print("\n")
