from pathlib import Path

path = Path('utils/json_validation.py')
text = path.read_text(encoding='utf-8')
text = text.replace("    def set_defaults(validator, properties, instance, schema):\n        if isinstance(instance, dict):\n            for property_name, subschema in properties.items():\n                if \"default\" in subschema and property_name not in instance:\n                    instance[property_name] = deepcopy(subschema[\"default\"])\n        yield from validate_properties(validator, properties, instance, schema)\n", "    def set_defaults(validator, properties, instance, schema):\n        if isinstance(instance, dict):\n            for property_name, subschema in properties.items():\n                if property_name not in instance:\n                    if \"default\" in subschema:\n                        instance[property_name] = deepcopy(subschema[\"default\"])\n                    elif subschema.get('type') == 'object' and \"properties\" in subschema:\n                        instance[property_name] = {}\n        yield from validate_properties(validator, properties, instance, schema)\n")
text = text.replace("    try:\n        validator = DefaultValidatingDraft7Validator(schema)\n    except SchemaError as exc:\n        raise ValueError(f\"Invalid JSON schema: {exc.message}\") from exc\n", "    try:\n        Draft7Validator.check_schema(schema)\n        validator = DefaultValidatingDraft7Validator(schema)\n    except SchemaError as exc:\n        raise ValueError(f\"Invalid JSON schema: {exc.message}\") from exc\n")
path.write_text(text, encoding='utf-8')
