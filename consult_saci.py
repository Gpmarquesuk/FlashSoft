"""
CONSULTA ESPECIAL √Ä JUNTA DE ESPECIALISTAS
Tema: Cria√ß√£o da SACI (Sistema Avan√ßado de Converg√™ncia de Ideias)

PROPOSTA DO USU√ÅRIO:
Criar uma c√©lula de solu√ß√µes avan√ßadas onde 4 modelos de IA discutem 
um problema at√© a MAIORIA obter consenso. Ser√° o "c√©rebro mestre" 
para resolver problemas cr√≠ticos da f√°brica FlashSoft e al√©m.

OBJETIVO: Obter feedback dos especialistas sobre como implementar 
a SACI da forma mais eficaz poss√≠vel.
"""

import os
import json
import time
from datetime import datetime
from llm_client import chat

# Carregar API key
api_key = os.getenv("OPENROUTER_API_KEY")
if not api_key:
    from dotenv import load_dotenv
    load_dotenv()
    api_key = os.getenv("OPENROUTER_API_KEY")

if not api_key:
    raise RuntimeError("OPENROUTER_API_KEY n√£o encontrada!")

print(f"‚úì API Key carregada")

# Modelos para consulta sobre SACI
MODELS = {
    'gemini25pro': {
        'id': 'google/gemini-2.5-pro',
        'name': 'Gemini 2.5 PRO'
    },
    'gpt5codex': {
        'id': 'openai/gpt-5-codex',
        'name': 'GPT-5 CODEX'
    },
    'grok4': {
        'id': 'x-ai/grok-4',
        'name': 'Grok 4'
    },
    'claude35sonnet': {
        'id': 'anthropic/claude-sonnet-4.5',
        'name': 'Claude 3.5 Sonnet'
    }
}

CONTEXT = """
# CONTEXTO - PROPOSTA DO USU√ÅRIO

## SITUA√á√ÉO ATUAL
A f√°brica FlashSoft est√° enfrentando problemas complexos que exigem solu√ß√µes 
inovadoras. Tentativas anteriores com agentes √∫nicos ou consultas paralelas 
n√£o produziram converg√™ncia suficiente.

## PROPOSTA: SACI (Sistema Avan√ßado de Converg√™ncia de Ideias)

### Conceito
Uma "c√©lula de solu√ß√µes avan√ßadas" onde 4 modelos de IA:
1. Recebem um problema/desafio complexo
2. Debatem iterativamente (m√∫ltiplas rodadas)
3. Avaliam e refinam propostas uns dos outros
4. Convergem at√© MAIORIA (3 de 4) concordar com uma solu√ß√£o

### Objetivo
Criar o "c√©rebro mestre" que resolve problemas cr√≠ticos atrav√©s de:
- Debate estruturado entre IAs
- Converg√™ncia for√ßada (n√£o apenas opini√µes paralelas)
- Valida√ß√£o cruzada de solu√ß√µes
- Refinamento iterativo at√© consenso

### Casos de Uso
- Decis√µes arquiteturais cr√≠ticas da f√°brica
- Debugging de problemas complexos
- Design de novos componentes
- An√°lise de trade-offs t√©cnicos
- Qualquer desafio que exija "intelig√™ncia coletiva"

## CONSULTA PR√âVIA
Na consulta anterior, voc√™s 3 (Gemini, GPT-5 Codex, Grok 4) recomendaram:
- Fixar Planner com Pydantic schema
- Reduzir context window
- Simplificar committee
- Criar UI com Streamlit

Mas o usu√°rio questiona: "N√£o estou convencido de que esta √© a melhor estrat√©gia."
Ele prop√µe que a PR√ìPRIA SACI seja usada para validar/refinar essas recomenda√ß√µes.
"""

QUESTIONS = """
# PERGUNTAS PARA OS ESPECIALISTAS

## 1. ARQUITETURA DA SACI
- Como estruturar o sistema de debate entre 4 IAs?
- Quantas rodadas de debate s√£o ideais?
- Como detectar converg√™ncia (al√©m de votos majorit√°rios)?
- Que mecanismos evitam loops infinitos sem consenso?

## 2. PROTOCOLO DE DEBATE
- Qual a melhor estrutura de prompts para debate produtivo?
- Como cada IA deve "responder" √†s propostas das outras?
- Deve haver um "moderador" (5¬∫ agente) ou auto-modera√ß√£o?
- Como lidar com empates (2 vs 2)?

## 3. SELE√á√ÉO DOS 4 MODELOS
- Quais 4 modelos devem compor a SACI?
- Deve haver diversidade (GPT, Claude, Gemini, Grok) ou especializa√ß√£o?
- Como balancear custo vs qualidade nas escolhas?

## 4. IMPLEMENTA√á√ÉO T√âCNICA
- Python framework ideal (LangChain, CrewAI, custom)?
- Como persistir estado do debate (hist√≥rico, propostas)?
- Estrutura de dados para propostas e votos?
- Como apresentar resultado final ao usu√°rio?

## 5. MECANISMOS DE CONVERG√äNCIA
- Vota√ß√£o simples (3 de 4) √© suficiente?
- Deve haver m√©tricas de "qualidade da converg√™ncia"?
- Como identificar quando debate est√° travado?
- Estrat√©gias de desempate (trazer 5¬∫ modelo? Human in the loop?)?

## 6. VALIDA√á√ÉO DA PR√ìPRIA SACI
- Como testar se a SACI funciona antes de us√°-la em problemas reais?
- Benchmarks ou problemas "toy" para valida√ß√£o?
- Como comparar SACI vs consultas paralelas tradicionais?

## 7. APLICA√á√ÉO IMEDIATA
O usu√°rio questiona as recomenda√ß√µes anteriores (Pydantic, context reduction, etc).
**PROPOSTA META:** Use o conceito da SACI NESTA PR√ìPRIA CONSULTA.

Ap√≥s responderem individualmente:
- Cada um deve AVALIAR as propostas dos outros 3
- Identificar pontos de consenso
- Propor s√≠ntese final que incorpore melhores ideias de todos
- Votar na solu√ß√£o final

## 8. CASOS DE USO AL√âM DA F√ÅBRICA
- Que outros problemas a SACI poderia resolver?
- Como torn√°-la gen√©rica o suficiente para reutiliza√ß√£o?
- Vale criar SACI como produto standalone (open-source)?

RESPONDA COM M√ÅXIMO DETALHE T√âCNICO E EXEMPLOS DE C√ìDIGO/PSEUDOC√ìDIGO QUANDO RELEVANTE.
"""

def consult_model(model_key: str, model_info: dict):
    """Consulta um modelo sobre a SACI"""
    model_id = model_info['id']
    model_name = model_info['name']
    
    print(f"\n{'='*80}")
    print(f"ü§ñ CONSULTANDO: {model_name}")
    print(f"   Model ID: {model_id}")
    print(f"{'='*80}\n")
    
    start_time = time.time()
    
    system_prompt = """You are a senior AI systems architect and expert in multi-agent systems, 
debate protocols, consensus mechanisms, and collective intelligence. You have deep knowledge of:
- Agent orchestration frameworks (LangChain, AutoGen, CrewAI)
- Debate and argumentation theory
- Consensus algorithms (Raft, Paxos, voting systems)
- Prompt engineering for collaborative AI
- Software architecture patterns

Provide detailed, technical, and actionable analysis with code examples when relevant."""

    user_prompt = f"{CONTEXT}\n\n{QUESTIONS}"
    
    try:
        print(f"‚è≥ Enviando prompt ({len(user_prompt)} chars)...")
        
        response = chat(
            model=model_id,
            system=system_prompt,
            user=user_prompt,
            max_tokens=4500,
            temperature=0.4
        )
        
        elapsed = time.time() - start_time
        
        input_tokens = (len(system_prompt) + len(user_prompt)) // 4
        output_tokens = len(response) // 4
        
        print(f"‚úì Resposta recebida!")
        print(f"  Tempo: {elapsed:.1f}s")
        print(f"  Input tokens: ~{input_tokens}")
        print(f"  Output tokens: ~{output_tokens}")
        
        # Salvar relat√≥rio
        report = {
            'model': model_name,
            'model_id': model_id,
            'timestamp': datetime.now().isoformat(),
            'elapsed_seconds': round(elapsed, 2),
            'tokens': {
                'input_approximate': input_tokens,
                'output_approximate': output_tokens,
                'total_approximate': input_tokens + output_tokens
            },
            'response': response
        }
        
        json_filename = f"logs/saci_consulta_{model_key}.json"
        with open(json_filename, 'w', encoding='utf-8') as f:
            json.dump(report, f, ensure_ascii=False, indent=2)
        print(f"  Salvo: {json_filename}")
        
        txt_filename = f"logs/saci_consulta_{model_key}.txt"
        with open(txt_filename, 'w', encoding='utf-8') as f:
            f.write(f"CONSULTA SACI - SISTEMA AVAN√áADO DE CONVERG√äNCIA\n")
            f.write(f"{'='*80}\n\n")
            f.write(f"Modelo: {model_name} ({model_id})\n")
            f.write(f"Data: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            f.write(f"Tempo: {elapsed:.1f}s\n")
            f.write(f"Tokens: ~{input_tokens + output_tokens}\n\n")
            f.write(f"{'='*80}\n")
            f.write(f"RESPOSTA:\n")
            f.write(f"{'='*80}\n\n")
            f.write(response)
        print(f"  Salvo: {txt_filename}")
        
        return True, response
        
    except Exception as e:
        print(f"‚ùå ERRO: {e}")
        return False, str(e)

def main():
    print("\n" + "="*80)
    print("CONSULTA SOBRE SACI - SISTEMA AVAN√áADO DE CONVERG√äNCIA")
    print("="*80)
    print(f"\nModelos a consultar:")
    for key, info in MODELS.items():
        print(f"  ‚Ä¢ {info['name']} ({info['id']})")
    print("\n")
    
    responses = {}
    
    # FASE 1: Consultas individuais
    print("\n" + "="*80)
    print("FASE 1: CONSULTAS INDIVIDUAIS")
    print("="*80 + "\n")
    
    for model_key, model_info in MODELS.items():
        success, response = consult_model(model_key, model_info)
        responses[model_key] = {
            'success': success,
            'response': response,
            'model_name': model_info['name']
        }
        
        if model_key != list(MODELS.keys())[-1]:
            print("\n‚è∏  Aguardando 3s antes da pr√≥xima consulta...")
            time.sleep(3)
    
    # FASE 2: An√°lise cruzada (simula√ß√£o de debate)
    print("\n\n" + "="*80)
    print("FASE 2: AN√ÅLISE CRUZADA (SIMULA√á√ÉO DE SACI)")
    print("="*80 + "\n")
    
    successful_responses = {k: v for k, v in responses.items() if v['success']}
    
    if len(successful_responses) >= 3:
        print("‚úì Respostas suficientes para an√°lise cruzada\n")
        
        # Preparar prompt de converg√™ncia
        convergence_prompt = """Voc√™ acabou de receber as propostas dos outros especialistas sobre a SACI.

PROPOSTAS DOS OUTROS MODELOS:
"""
        for key, data in successful_responses.items():
            if data['success']:
                convergence_prompt += f"\n{'='*80}\n"
                convergence_prompt += f"PROPOSTA DE {data['model_name']}:\n"
                convergence_prompt += f"{'='*80}\n"
                convergence_prompt += data['response'][:2000] + "...\n\n"
        
        convergence_prompt += """
TAREFA DE CONVERG√äNCIA:
1. Identifique os 3 pontos principais de CONSENSO entre as propostas
2. Identifique diverg√™ncias ou trade-offs importantes
3. Proponha uma S√çNTESE FINAL que integre as melhores ideias
4. Vote: voc√™ APROVA a s√≠ntese final? (SIM/N√ÉO e por qu√™)

Responda de forma estruturada e concisa (m√°x 1000 tokens).
"""
        
        # Consultar um modelo para converg√™ncia (Gemini como "facilitador")
        print("üîÑ Executando rodada de converg√™ncia...")
        print("   Facilitador: Gemini 2.5 PRO\n")
        
        try:
            conv_response = chat(
                model='google/gemini-2.5-pro',
                system="You are a facilitator of multi-agent consensus. Analyze proposals and synthesize the best solution.",
                user=convergence_prompt,
                max_tokens=2000,
                temperature=0.3
            )
            
            conv_filename = "logs/saci_convergencia.txt"
            with open(conv_filename, 'w', encoding='utf-8') as f:
                f.write("SACI - RODADA DE CONVERG√äNCIA\n")
                f.write("="*80 + "\n\n")
                f.write("Facilitador: Gemini 2.5 PRO\n")
                f.write(f"Data: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
                f.write("="*80 + "\n")
                f.write("S√çNTESE E CONSENSO:\n")
                f.write("="*80 + "\n\n")
                f.write(conv_response)
            
            print(f"‚úì Converg√™ncia salva: {conv_filename}")
            
        except Exception as e:
            print(f"‚ùå Erro na converg√™ncia: {e}")
    
    # Resumo final
    print(f"\n\n{'='*80}")
    print("RESUMO DA CONSULTA SACI")
    print(f"{'='*80}\n")
    
    successful = sum(1 for v in responses.values() if v['success'])
    print(f"  Consultas bem-sucedidas: {successful}/{len(MODELS)}")
    
    for model_key, data in responses.items():
        status = "‚úì SUCESSO" if data['success'] else "‚úó FALHA"
        print(f"  {status}: {data['model_name']}")
    
    print(f"\n{'='*80}")
    print("Relat√≥rios salvos em:")
    print("  - logs/saci_consulta_*.json + .txt (propostas individuais)")
    print("  - logs/saci_convergencia.txt (s√≠ntese final)")
    print(f"{'='*80}\n")

if __name__ == "__main__":
    main()
